// Mocks generated by Mockito 5.0.17 from annotations
// in rick_and_morty/test/features/characters/domain/use_cases/get_series_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rick_and_morty/core/error/failures.dart' as _i5;
import 'package:rick_and_morty/features/characters/domain/entities/character.dart'
    as _i6;
import 'package:rick_and_morty/features/characters/domain/entities/series.dart'
    as _i7;
import 'package:rick_and_morty/features/characters/domain/repositories/characters_repository.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [CharactersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharactersRepository extends _i1.Mock
    implements _i3.CharactersRepository {
  MockCharactersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>> getCharacters() =>
      (super.noSuchMethod(Invocation.method(#getCharacters, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.Character>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.Character>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Character>> getConcreteCharacter(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getConcreteCharacter, [id]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Character>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Character>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Character>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Series>> getSeries() =>
      (super.noSuchMethod(Invocation.method(#getSeries, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i7.Series>>.value(
                  _FakeEither_0<_i5.Failure, _i7.Series>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i7.Series>>);
}
